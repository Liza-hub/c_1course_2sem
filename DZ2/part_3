#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <locale.h>
#include <string.h>

typedef struct list 
{
	char value;
	list* left;
	list* right;
}list;

int Priority(char c)
{
	switch(c)
	{
	case '+': 
	case '-': return 1;
	case '*':
	case '/': return 2;
	}
	return 100;
}

list* make_tree(char function[], int first, int last)
{
	list *tree = new list;
	int i, prt, MinPrt, count = 0, k;
	char c;
	if ((first == last) || (first==(last-1)))
	{
		tree->value = function[first];
		tree->left = NULL;
		tree->right = NULL;
		return tree;
	}
	MinPrt = 100;
	for (i = first; i < last; i++)
	{
		c = function[i];
		if (c == '(') { count++; continue; }
		if (c == ')') { count--; continue; }
		if (count > 0) continue;
		prt = Priority(c);
		if (prt < MinPrt)
		{
			MinPrt = prt;
			k = i;
		}
	}
	if (MinPrt==100 && function[first] == '(' && (function[last] == ')' || function[last] == '\0'))
		return make_tree(function, first + 1, last - 1);
	else {
		tree->value = function[k];
		tree->left = make_tree(function, first, k - 1);
		tree->right = make_tree(function, k + 1, last);
		return tree;
	}
}

void PrintTree(list *tree, int spase)
{
	const int COUNT = 5;
	if (tree != NULL)
	{
		spase += COUNT;
		PrintTree(tree->right, spase);
		for (int i = COUNT; i < spase; i++)
			printf("%c", ' ');
		printf("%c\n", tree->value);
		PrintTree(tree->left, spase);
	}
}

int Number(list *tree)
{
	int t = 0;
	if (tree==NULL) return 0;
	if (strchr("1234567890", tree->value) == NULL) return 0;
	return 1;
}

int Operator(list *tree, int x, int y)
{
	switch (tree->value)
	{
	case '+': return x + y;
	case '-': return x - y; 
	case '*': return x * y;
	case '/': return x / y; 
	}
}


float Calculate(list *tree, int &k)
{
	float a, b;
	float c, buffer;
	if (tree == NULL) return 0;
	if (tree->left != NULL) a = Calculate(tree->left, k);
	if (tree->right != NULL) b = Calculate(tree->right, k);
	if (tree->left == NULL && tree->right == NULL)
	{
		if (Number(tree) == 1) { buffer = tree->value - '0'; }
		else {
			printf("Введите %c - ", tree->value);
			scanf("%f", &buffer);
		}
		delete tree;
		tree = NULL;
		return buffer;
	}
	switch (tree->value)
	{
	case '+': return (a + b);
	case '-': return (a - b);
	case '*': return (a * b);
	case '/': { if (b == 0) k++; return (a / b); }
	}
}


int main()
{
	setlocale(0, "russian");
	char function[80];
	list *tree;
	int k = 0, KEY;
	printf("  1) Посчитать значение (6-4*(b+2)/4)/(7-a)\n  2) Ввести новое выражение\n");
	scanf("%d", &KEY);
	if (KEY == 1)
	{
		strcpy(function, "(6-4*(b+2)/4)/(7-a)");
	}
	else if (KEY == 2)
	{
		printf("Введите арифметическое выражение: ");
		scanf("%s", &function);
	}
	tree = make_tree(function, 0, strlen(function));
	printf("Полученное дерево из вырожения:\n");
	PrintTree(tree, 20);
	float c = Calculate(tree, k);
	if (k == 0)
	printf("%6.2f", c);
	else printf("     Деление на 0!!!\n     Проверьте данные!");
	return 0;
}
